#pragma kernel CSMain

static const int threadNum = 1024;

struct BoidData
{
    float3 position;
    float3 foward;

    float3 aliAcc;
    float3 sepAcc;
    float3 cohAcc;

    int perceptNum;
};

RWStructuredBuffer<BoidData> boids;
int boidNum;
float perceptionRadius;
float avoidanceRadius;

[numthreads(threadNum, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int selfIndex = id.x;
    for(int i = 0; i < boidNum; i++)
    {
        if (i != selfIndex)
        {
            float3 delta = boids[i].position - boids[selfIndex].position;
            float dst2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            if(dst2 < perceptionRadius * perceptionRadius)
            {
                boids[selfIndex].perceptNum++;
                //Cohesion Acceleration
                boids[selfIndex].cohAcc += delta;
                //Alignment Acceleration
                boids[selfIndex].aliAcc += boids[i].foward;
                //Separation Acceleration
                if(dst2 < avoidanceRadius * avoidanceRadius)
                    boids[selfIndex].sepAcc -= (delta/dst2);
            }
        }
    }
}
